#!/usr/bin/env python3
import json, sys, os
from pprint import pprint
from pathlib import Path
import argparse

local_file = 'vent.json'
global_file = str(Path.home()) + '/.ventures_profile'

commands = "commands"
projects = "ventures"

init_local_file = {
	commands:{}
}
init_global_file = {
	projects:{}
}

def _get_local_directory():
	length = len(str(Path.cwd().parent)) - len(str(Path.cwd())) + 1
	return str(Path.cwd())[length:]

def open_local():
	try:
		with open(local_file, 'r') as f:
			data = json.load(f)
		return data
	except:
		return None

def save_local(contents):
	with open(local_file, 'w+') as f:
		data = f.write(json.dumps(contents))
	return data

def open_global():
	try:
		with open(global_file, 'r') as f:
			data = json.load(f)
		return data
	except:
		return None

def save_global(contents):
	with open(global_file, 'w+') as f:
		data = f.write(json.dumps(contents))
	return data

def go(args):
	global_check = open_global()
	if global_check == None:
		save_global(init_global_file)
		global_check = init_global_file
	venture = args.venture
	if venture not in global_check[projects]:
		print("Error: venture '" + venture + "' not found")
		return
	print(global_check[projects][venture])

def init(args):
	global_check = open_global()
	if global_check == None:
		save_global(init_global_file)
		global_check = init_global_file

	name = args.vent_name

	if name in global_check[projects]:
		print("Error: cannot init a new venture when an existing venture is already named: " + name)
		return
	local_check = open_local()
	if local_check != None:
		print("Error: cannot init a new venture on a already created project")
		return

	global_check[projects][name] = str(Path.cwd())
	init_local_file["name"] = name
	save_global(global_check)
	save_local(init_local_file)

def add(args):
	file = open_local()
	if file == None:
		print("Error: cannot add a new command without initing a venture")
		return
	file[commands][args.command_name.lower()] = args.value
	save_local(file)

def delete(args):
	file = open_local()
	if file == None:
		print("Error: cannot delete a command without initing a venture")
		return
	if args.command_name.lower() in file[commands]:
		del file[commands][args.command_name.lower()]
		save_local(file)
		print("Successfully deleted " + args.command_name)
	else:
		print("Error: cannot find " + args.command_name + " in list of local commands")

def find(args):
	file = open_global()
	if file == None:
		print("Error: must have created a venture first")
		return
	key = args.query

	key = key.lower()
	max_length = 12
	possibilities = []
	for project in file[projects]:
		if key in project.lower():
			possibilities.append(project)
			if len(project) > max_length + 2:
				max_length = len(project) + 2

	print(("%" + str(max_length) + "s")%"Venture Name")
	print("-"*max_length)
	for project in possibilities:
		print(("%" + str(max_length) + "s")%(project))

def list(args):
	file = open_local()
	if file == None:
		print("Error: cannot list commands without initing a venture")
		return
	max_name = 8
	for name,_ in file[commands].items():
		if len(name) > max_name + 2:
			max_name = len(name) + 2
	print(("%" + str(max_name) + "s %s")%("Name", "Command"))
	print("-" * (max_name + 9))
	for name, comd in file[commands].items():
		print(("%" + str(max_name) + "s %-s")%(name, comd))

def run(args):
	file = open_local()
	if file == None:
		print("Error: cannot run a command without initing a venture")
		return
	if args[0].lower() in file[commands]:
		os.system(file[commands][args.command_name.lower()])
	else:
		print("Error: name " + args.command_name.lower() + " is not defined")
		return

# commands = ["go", "g", "init", "i", "add", "list", "ls",
# 			"delete", "del", "run",  "r", "find", "f"]

def parse_args(args):
	parser = argparse.ArgumentParser(description='CLI for shortcuts to commands, bookmarking and navigating projects')
	parser.add_argument('--version', action='version', version='%(prog)s 1.0')

	subparsers = parser.add_subparsers(help='sub-command help', dest="cmd")
	subparsers.required = True

	parser_go = subparsers.add_parser("go", help='go help', description="Prints the path of the venture")
	parser_go.add_argument("venture", help="The venture you wish to navigate to")
	parser_go.set_defaults(func=go)

	parser_init = subparsers.add_parser("init", help='init help', description="Initializes a new venture")
	parser_init.add_argument("vent_name",
		help="The name of the new venture, defaults to parent directory",
		default=_get_local_directory()
	)
	parser_init.set_defaults(func=init)

	parser_add = subparsers.add_parser("add", help='add help', description="Add a new command to the current venture")
	parser_add.add_argument("command_name", help="The name of the new command for the current venture")
	parser_add.add_argument("value", help="The value of the new command")
	parser_add.set_defaults(func=add)

	parser_list = subparsers.add_parser("list", help='list help', description="List commands for the current venture")
	parser_list.set_defaults(func=list)

	parser_delete = subparsers.add_parser("delete", help='delete help', description="Deletes a command from the current venture")
	parser_delete.add_argument("command_name", help="The name of the command to be deleted")
	parser_delete.set_defaults(func=delete)

	parser_run = subparsers.add_parser("run", help='run help', description="Runs a command from the current venture")
	parser_run.add_argument("command_name", help="The name of the command to be run")
	parser_run.set_defaults(func=run)

	parser_find = subparsers.add_parser("find", help='find help', description="Finds a venture based on an optional query")
	parser_find.add_argument("query", nargs='?', default="", help="The query to match agains the names of ventures")
	parser_find.set_defaults(func=find)

	args = parser.parse_args()
	args.func(args)

if __name__ == '__main__':
	#args = [i.lower() for i in sys.argv]
	
	#if len(sys.argv) > 1:
	parse_args(sys.argv)
